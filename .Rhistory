# Loads the standard dataset mtcars from a base package in R.
data(mtcars)
# Correlation Matrix
cor(mtcars)
round(cor(mtcars), 2)
# Correlation Plot
install.packages("corrplot")
library(corrplot)
corrplot(cor(mtcars), type = "upper")
plot(mtcars$mpg, mtcars$wt)
cor(mtcars$mpg, mtcars$wt)
plot(mtcars$mpg, mtcars$hp)
cor(mtcars$mpg, mtcars$hp)
plot(mtcars$mpg, mtcars$qsec)
cor(mtcars$mpg, mtcars$qsec)
plot(mtcars$drat, mtcars$qsec)
cor(mtcars$drat, mtcars$qsec)
plot(mtcars$hp, mtcars$cyl)
cor(mtcars$hp, mtcars$cyl)
# m1 with wt only -------------------------------------------------------------------
m1 <- lm(mpg ~ wt, data = mtcars)
summary(m1) # See the PPT file
plot(x = mtcars$wt, y = mtcars$mpg, main = "Regression Line with wt as sole factor")
abline(m1, col = "red")
identify(x = mtcars$wt, y = mtcars$mpg) # Identify the cases selected in Plot.
# m1 with wt only -------------------------------------------------------------------
m1 <- lm(mpg ~ wt, data = mtcars)
summary(m1) # See the PPT file
plot(x = mtcars$wt, y = mtcars$mpg, main = "Regression Line with wt as sole factor")
abline(m1, col = "red")
identify(x = mtcars$wt, y = mtcars$mpg) # Identify the cases selected in Plot.
library(maptools)
library(rvest)
library(dplyr)
library(stringr)
library(janitor)
library(data.table)
library(plyr)
library(readr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(sf)
library(httr)
library(xml2)
library(jsonlite)
library(tibble)
library(XML)
library(geosphere)
library(matrixStats)
library(data.table)
library(neuralnet)
library(GGally)
library(caTools)
library(ade4)
library(keras)
install.packages("tensorflow")
install.packages("tensorflow")
library(tensorflow)
setwd("/Users/seunghwanchoi/Documents/y2s1/BC2406/21:10_3PM2")
#########################
set.seed(2004)
# Loading
hdb_final <- read.csv('HDB_FINAL_DATA.csv')
hdb_final
#Cleaning
working.df <- distinct(hdb_final[!grepl("199|200|2010|2011", hdb_final$month),])
tail(working.df)
working.df = subset(working.df, select = -c(address, ADDRESS, block, street_name))
str(working.df)
working.df
working.df["month"]
setwd("/Users/seunghwanchoi/Documents/y2s1/BC2406/21:10_3PM2")
setwd("/Users/seunghwanchoi/Documents/y2s1/BC2406/21_10_3PM2")
#########################
set.seed(2004)
# Loading
hdb_final <- read.csv('HDB_FINAL_DATA.csv')
hdb_final
#Cleaning
working.df <- distinct(hdb_final[!grepl("199|200|2010|2011", hdb_final$month),])
tail(working.df)
working.df = subset(working.df, select = -c(address, ADDRESS, block, street_name))
str(working.df)
working.df
working.df["month"]
library(maptools)
library(rvest)
library(dplyr)
library(stringr)
library(janitor)
library(data.table)
library(plyr)
library(readr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(sf)
library(httr)
library(xml2)
library(jsonlite)
library(tibble)
library(XML)
library(geosphere)
library(matrixStats)
library(data.table)
library(neuralnet)
library(GGally)
library(caTools)
library(ade4)
library(keras)
library(tensorflow)
# Loading
hdb_final <- read.csv('HDB_FINAL_DATA.csv')
hdb_final
#Cleaning
working.df <- distinct(hdb_final[!grepl("199|200|2010|2011", hdb_final$month),])
tail(working.df)
working.df = subset(working.df, select = -c(address, ADDRESS, block, street_name))
str(working.df)
working.df
working.df["month"]
########################
nums <- select(hdb,-c("ADDRESS", "month", "town", "address", "flat_type", "block", "street_name", "storey_range", "flat_model", "lease_commence_date", "LATITUDE", "LONGTITUDE"))
nums <- select(working.df,-c("ADDRESS", "month", "town", "address", "flat_type", "block", "street_name", "storey_range", "flat_model", "lease_commence_date", "LATITUDE", "LONGTITUDE"))
working.df
str(working.df)
nums <- colnames(working.df)[-c("town", "flat_type", "storey_range", "flat_model")]
nums <- select(working.df, -c("town", "flat_type", "storey_range", "flat_model"))
working.df <- working.df %>% mutate_at(colnames(nums), list(~scale(.) %>% as.vector))
working.df$month <- substr(working.df$month, 1, 4)
working.df <- working.df %>% mutate_if(sapply(working.df, is.character), as.factor)
str(working.df)
ohe_cols <- c("month", "town", "flat_type", "storey_range", "flat_model")
for (f in ohe_cols){
df_all_dummy <- acm.disjonctif(working.df[f])
working.df[f] <- NULL
working.df <- cbind(working.df, df_all_dummy)
}
working.df
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
use_condaenv("r-tensorflow")
model <- keras_model_sequential()
model %>%
layer_dense(units = 256, activation = 'relu', input_shape = c(784)) %>%
layer_dropout(rate = 0.4) %>%
layer_dense(units = 128, activation = 'relu') %>%
layer_dropout(rate = 0.3) %>%
layer_dense(units = 10, activation = 'softmax')
devtools::install_github("rstudio/tensorflow")
install.packages("devtools")
library(devtools)
devtools::install_github("rstudio/tensorflow")
install_tensorflow()
install.packages("tensorflow")
install.packages("tensorflow")
install_tensorflow()
library(devtools)
library(maptools)
library(rvest)
library(dplyr)
library(stringr)
library(janitor)
library(data.table)
library(plyr)
library(readr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(sf)
library(httr)
library(xml2)
library(jsonlite)
library(tibble)
library(XML)
library(geosphere)
library(matrixStats)
library(data.table)
library(neuralnet)
library(GGally)
library(caTools)
library(ade4)
library(keras)
install_tensorflow()
install_tensorflow()
library(devtools)
install_tensorflow()
library(devtools)
library(maptools)
library(rvest)
library(dplyr)
library(stringr)
library(janitor)
library(data.table)
library(plyr)
library(readr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(sf)
library(httr)
library(xml2)
library(jsonlite)
library(tibble)
library(XML)
library(geosphere)
library(matrixStats)
library(data.table)
library(neuralnet)
library(GGally)
library(caTools)
library(ade4)
library(keras)
library(tensorflow)
install_tensorflow()
conda create -n r-reticulate
install_tensorflow(method = 'conda', envname = 'r-reticulate')
install.packages("reticulate")
library(reticulate)
use_condaenv('r-reticulate')
library(tensorflow)
tf$constant("Hellow Tensorflow")
library(devtools)
library(maptools)
library(rvest)
library(dplyr)
library(stringr)
library(janitor)
library(data.table)
library(plyr)
library(readr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(sf)
library(httr)
library(xml2)
library(jsonlite)
library(tibble)
library(XML)
library(geosphere)
library(matrixStats)
library(data.table)
library(neuralnet)
library(GGally)
library(caTools)
library(ade4)
library(keras)
library(tensorflow)
library(reticulate)
install_tensorflow(method = 'conda', envname = 'r-reticulate')
library(devtools)
library(maptools)
library(rvest)
library(dplyr)
library(stringr)
library(janitor)
library(data.table)
library(plyr)
library(readr)
library(dplyr)
library(tidyverse)
library(reshape2)
library(sf)
library(httr)
library(xml2)
library(jsonlite)
library(tibble)
library(XML)
library(geosphere)
library(matrixStats)
library(data.table)
library(neuralnet)
library(GGally)
library(caTools)
library(ade4)
library(keras)
library(tensorflow)
library(reticulate)
use_condaenv('r-reticulate')
tf$constant("Hellow Tensorflow")
devtools::install_github("rstudio/tensorflow")
install_tensorflow(method = 'conda', envname = 'r-reticulate')
use_condaenv('r-reticulate')
tf$constant("Hellow Tensorflow")
devtools::install_github("rstudio/reticulate")
library(reticulate)
use_condaenv('r-reticulate')
tf$constant("Hellow Tensorflow")
version
## 75% of the sample size
smp_size <- floor(0.75 * nrow(working.df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(working.df)), size = smp_size)
train <- working.df[train_ind, ]
test <- working.df[-train_ind, ]
train
str(train)
vars <- colnames(train)[-1][-1][-1]
for (i in vars){
nn <- neuralnet(paste("resale_price ~ floor_area_sqm + lease_commence_date ", i, sep = "+"), data = train, hidden = c(5,3), linear.output = TRUE,
lifesign = "full", lifesign.step = 1)
}
nn <- neuralnet(paste("resale_price ~ floor_area_sqm + lease_commence_date ", i, sep = "+"), data = train, hidden = c(3,2), linear.output = TRUE,
lifesign = "full", lifesign.step = 1)
smaller_sample <- floor(0.1 * nrow(working.df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(working.df)), size = smaller_sample)
train <- working.df[train_ind, ]
test <- working.df[-train_ind, ]
colnames(train)
vars <- colnames(train)[-1][-1][-1]
for (i in vars){
nn <- neuralnet(paste("resale_price ~ floor_area_sqm + lease_commence_date ", i, sep = "+"), data = train, hidden = c(3,2), linear.output = TRUE,
lifesign = "full", lifesign.step = 1)
}
write_csv(working.df, "work.csv")
## 75% of the sample size
smp_size <- floor(0.75 * nrow(working.df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(working.df)), size = smp_size)
train <- working.df[train_ind, ]
test <- working.df[-train_ind, ]
train
# Loading
hdb_final <- read.csv('HDB_FINAL_DATA.csv')
install.packages("randomForest")
library(randomForest)
#Cleaning
working.df <- distinct(hdb_final[!grepl("199|200|2010|2011", hdb_final$month),])
working.df = subset(working.df, select = -c(address, ADDRESS, block, street_name))
str(working.df)
working.df
working.df["month"]
nums <- select(working.df, -c("town", "flat_type", "storey_range", "flat_model"))
working.df <- working.df %>% mutate_at(colnames(nums), list(~scale(.) %>% as.vector))
working.df$month <- substr(working.df$month, 1, 4)
working.df <- working.df %>% mutate_if(sapply(working.df, is.character), as.factor)
str(working.df)
ohe_cols <- c("month", "town", "flat_type", "storey_range", "flat_model")
for (f in ohe_cols){
df_all_dummy <- acm.disjonctif(working.df[f])
working.df[f] <- NULL
working.df <- cbind(working.df, df_all_dummy)
}
working.df
colnames(train)
vars <- colnames(train)[-1][-1][-1]
for (i in vars){
nn <- neuralnet(paste("resale_price ~ floor_area_sqm + lease_commence_date ", i, sep = "+"), data = train, hidden = c(3,2), linear.output = TRUE,
lifesign = "full", lifesign.step = 1)
}
m1 <- randomForest(paste("resale_price ~ floor_area_sqm + lease_commence_date ", i, sep = "+"), data = train)
colnames(train)
vars <- colnames(train)[-1][-1][-1]
for (i in vars){
m1 <- randomForest(paste("resale_price ~ floor_area_sqm + lease_commence_date ", i, sep = "+"), data = train)
}
for (i in vars){
m1 <- randomForest(paste("resale_price ~ floor_area_sqm + lease_commence_date ", i, sep = "+"), data = train)
}
train
m1 <- randomForest(formula = resale_price ~ ., data = train)
train
str(train)
resale_price_col <- which(colnames(train) == "resale_price")
colnames(train)[-resale_price_col] <- paste0( "V", colnames(train)[-resale_price_col])
m1 <- randomForest(formula = resale_price ~ ., data = train)
train
set.seed(1)
data <- data.frame(x = rbinom(100, 1, 0.5))
data$`180018R` <- data$x
data$x <- NULL
data$Response <- as.factor(rbinom(100, 1, 0.2))
table(data$Response)
set.seed(222)
rf <- randomForest(Response~., data = data)
# Produces error as in the original example
# Fixing the issue by adding a character to the column names except response
data2 <- data
response_col <- which(colnames(data2) == "Response")
colnames(data2)[-response_col] <- paste0( "V", colnames(data2)[-response_col])
set.seed(222)
rf <- randomForest(Response ~ ., data = data2)
set.seed(222)
m1 <- randomForest(formula = resale_price ~ ., data = train)
data2
train
hdb_final <- read.csv('HDB_FINAL_DATA.csv')
hdb_final
#Cleaning
working.df <- distinct(hdb_final[!grepl("199|200|2010|2011", hdb_final$month),])
tail(working.df)
working.df = subset(working.df, select = -c(address, ADDRESS, block, street_name))
str(working.df)
working.df
nums <- select(working.df, -c("town", "flat_type", "storey_range", "flat_model"))
working.df <- working.df %>% mutate_at(colnames(nums), list(~scale(.) %>% as.vector))
working.df$month <- substr(working.df$month, 1, 4)
working.df <- working.df %>% mutate_if(sapply(working.df, is.character), as.factor)
str(working.df)
working.df
for (f in ohe_cols){
df_all_dummy <- acm.disjonctif(working.df[f])
working.df[f] <- NULL
working.df <- cbind(working.df, df_all_dummy)
}
working.df
smp_size <- floor(0.75 * nrow(working.df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(working.df)), size = smp_size)
train <- working.df[train_ind, ]
test <- working.df[-train_ind, ]
names(train) <- make.names(train)
m1 <- randomForest(formula = resale_price ~ ., data = train)
m1 <- randomForest(formula = resale_price ~ ., data = train, do.trace = TRUE)
m1 <- randomForest(formula = resale_price ~ ., data = train, do.trace = TRUE)
names(train) <- make.names(train)
m1 <- randomForest(formula = resale_price ~ ., data = train, do.trace = TRUE)
hdb_final <- read.csv('HDB_FINAL_DATA.csv')
hdb_final
#Cleaning
working.df <- distinct(hdb_final[!grepl("199|200|2010|2011", hdb_final$month),])
tail(working.df)
working.df = subset(working.df, select = -c(address, ADDRESS, block, street_name))
str(working.df)
working.df
nums <- select(working.df, -c("town", "flat_type", "storey_range", "flat_model"))
working.df <- working.df %>% mutate_at(colnames(nums), list(~scale(.) %>% as.vector))
working.df$month <- substr(working.df$month, 1, 4)
working.df <- working.df %>% mutate_if(sapply(working.df, is.character), as.factor)
str(working.df)
working.df
ohe_cols <- c("month", "town", "flat_type", "storey_range", "flat_model")
for (f in ohe_cols){
df_all_dummy <- acm.disjonctif(working.df[f])
working.df[f] <- NULL
working.df <- cbind(working.df, df_all_dummy)
}
working.df
smp_size <- floor(0.75 * nrow(working.df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(working.df)), size = smp_size)
train <- working.df[train_ind, ]
test <- working.df[-train_ind, ]
m1 <- randomForest(formula = resale_price ~ ., data = train, do.trace = TRUE)
hdb_final <- read.csv('HDB_FINAL_DATA.csv')
hdb_final
#Cleaning
working.df <- distinct(hdb_final[!grepl("199|200|2010|2011", hdb_final$month),])
tail(working.df)
working.df = subset(working.df, select = -c(address, ADDRESS, block, street_name))
str(working.df)
working.df
working.df["month"]
nums <- select(working.df, -c("town", "flat_type", "storey_range", "flat_model"))
working.df <- working.df %>% mutate_at(colnames(nums), list(~scale(.) %>% as.vector))
working.df$month <- substr(working.df$month, 1, 4)
working.df <- working.df %>% mutate_if(sapply(working.df, is.character), as.factor)
str(working.df)
working.df
smp_size <- floor(0.75 * nrow(working.df))
## set the seed to make your partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(working.df)), size = smp_size)
train <- working.df[train_ind, ]
test <- working.df[-train_ind, ]
m1 <- randomForest(formula = resale_price ~ ., data = train, do.trace = TRUE)
m1 <- randomForest(formula = resale_price ~ ., data = train, do.trace = TRUE)
